import json

""" Метод для проверки ответов наших запросов """
class Checking:

    """ Метод для проверки статус кода """
    @staticmethod # Сделаем методы статическими (без Self) и сможем вызывать в любом классе и в любом тесте, и не будем привязываться к этому классу
    def check_status_code(result, verify_status_code):  # Передадим в функцию результат запроса и проверяемый статус код (например 200)
        assert verify_status_code == result.status_code # Сравним результат
        print("!!! Успешно. Статус коде: " + str(result.status_code))

    """ Метод для проверки наличия обязательных полей """
    @staticmethod # Сделаем методы статическими (без Self) и сможем вызывать в любом классе и в любом тесте, и не будем привязываться к этому классу
    def check_json_token(result, expected_value):  # Передадим в функцию результат запроса и ожидаемое название полей
        token = json.loads(result.text) # Функция loads преобразует строку(в формате json) в словарь(dict) Python.
        assert expected_value == list(token)  # Получаем список(list) из ключей json, для сравнения
        print("!!! Успешно. Все поля присутствуют")

    """ Метод для проверки содержания полей """
    @staticmethod # Сделаем методы статическими (без Self) и сможем вызывать в любом классе и в любом тесте, и не будем привязываться к этому классу
    def check_json_value(result, field_name, field_value): # Передадим в функцию результат запроса, название поля и содержание поля
        check = result.json()   # В переменную сохраняем ответ в формате json, для дальнейшей работы с ним
        check_value = check.get(field_name) # Получаем значение поля
        assert field_value == check_value   # Проверяем содержание поля
        print("Содержание поля " + field_name + " верен !!!")

    """ Метод для проверки содержания полей по заданному слову"""
    @staticmethod# Сделаем методы статическими (без Self) и сможем вызывать в любом классе и в любом тесте, и не будем привязываться к этому классу
    def check_json_search_word_in_value(result, field_name, search_name): # Передадим в функцию результат запроса, название поля и заданное слово
        check = result.json()   # В переменную сохраняем ответ в формате json, для дальнейшей работы с ним
        check_value = check.get(field_name) # Получаем значение поля
        if search_name in check_value:
            print("Слово " + search_name + " присутствует")
        else:
            print("Слово " + search_name + " отсутствует")





